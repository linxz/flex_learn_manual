import{_ as e}from"./02-03-4.b7158187.js";import{_ as o,o as l,c,a as d}from"./app.8a7fda1c.js";const s="/flex_learn_manual/image/02-04-1.png",n="/flex_learn_manual/image/02-04-2.png",r="/flex_learn_manual/image/02-04-3.png",a={},i=d(`<h1 id="📕-flex-容器-flex-flow" tabindex="-1"><a class="header-anchor" href="#📕-flex-容器-flex-flow" aria-hidden="true">#</a> 📕 flex 容器：flex-flow</h1><p>在前面我们了解了 <code>flex-direction</code> 与 <code>flex-wrap</code> 这两个属性，在这两个属性的介绍中，也都提到了“主轴”与“交叉轴”、“起始线”与“终止线”的变化。而这“轴”与这“线”的位置变化，关键因素就是 flex 元素在其容器中方向的变化。flex 元素从哪个位置开始，流向哪个位置，最终影响了“轴”与“线”在这个 flex 容器中的定义。</p><p>或许也就是因为 <code>flex-direction</code> 与 <code>flex-wrap</code> 是直接影响着 flex 元素的流向改变，所以，在诸多的 flex 属性中，有个将这两个属性简写的 <code>flex-flow</code> 属性存在。</p><p><code>flex-flow</code> 只是一个简写，因此它自身的属性值就是 <code>flex-direction</code> 与 <code>flex-wrap</code> 的属性值，默认值也是如此。并且这两个属性的属性值都是很有特色，一眼就能看出来，所以在 <code>flex-flow</code> 中不需要考虑前后顺序问题，甚至仅仅只是写一个属性也无所谓，另外一个会采用默认值来补充。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 
  file: flex_0013.css
  flex-flow: wrap-reverse; 等效于 flex-wrap: wrap-reverse;；
*/</span>
<span class="token selector">.demo</span> <span class="token punctuation">{</span>
  <span class="token property">flex-flow</span><span class="token punctuation">:</span> wrap-reverse<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个很<a href="../../demo.html?id=13">简单的例子</a>，当我们使用 <code>flex-flow: wrap-reverse;</code> 时，其实是定义了两个属性，分别是：</p><ul><li><code>flex-wrap: wrap-reverse;</code></li><li><code>flex-direction: row;</code></li></ul><p>虽然我们没有写明 <code>flex-direction</code> 的值，但浏览器会自动采用默认值 <code>row</code> 作为该属性值，所以最终在浏览器中的表现效果是这样的：</p><img src="`+e+'" style="zoom:50%;"><p>在浏览器的开发者工具（DevTools）中，我们可以通过 <strong>Elements</strong> 面板中的 <strong>Styles</strong> 部分看到 <code>flex-flow</code> 展开后的情况，其中 <code>flex-direction</code> 的值是 <code>initial</code>。</p><img src="'+s+'" style="zoom:50%;"><p>初始值，也就是 <code>row</code>，我们可以通过 <strong>Computed</strong> 中找到最终解析后的 <code>flex-direction</code> 的值。</p><img src="'+n+'" style="zoom:50%;"><p>假如我们定义的属性是 <code>flex-flow: column;</code> 的话，得到的结果会是什么呢？很显然，<code>flex-wrap</code> 就会变成 <code>initial</code> 了。如果 <code>flex-flow: column wrap;</code> 的话，那就没有 <code>initial</code>，而是具体的属性值了。</p><img src="'+r+'" style="zoom:50%;"><p>看到上面这张图，如果是让我们用 <code>flex-flow</code> 属性来实现的话，分别应该是什么呢？不要感觉混乱，其实就是不同方向的 <code>row</code> 以及 <code>wrap</code> 而实现的。</p><ul><li>A：<code>flex-flow: wrap row-reverse;</code></li><li>B：<code>flex-flow: wrap-reverse;</code></li><li>C：<code>flex-flow: wrap-reverse row-reverse;</code></li><li>D：<code>flex-flow: wrap;</code></li></ul>',17),t=[i];function f(p,x){return l(),c("div",null,t)}const u=o(a,[["render",f],["__file","flex-flow.html.vue"]]);export{u as default};
