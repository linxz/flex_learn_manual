import{_ as o}from"./02-10-01.a84a8d68.js";import{_ as l,r as t,o as c,c as i,b as n,d as e,e as d,a as s}from"./app.8a7fda1c.js";const r="/flex_learn_manual/image/02-10-02.png",p="/flex_learn_manual/image/02-10-03.png",u="/flex_learn_manual/image/02-10-04.png",m="/flex_learn_manual/image/02-10-05.png",x="/flex_learn_manual/image/02-10-06.png",f="/flex_learn_manual/image/02-10-07.png",v="/flex_learn_manual/image/02-10-08.png",_="/flex_learn_manual/image/02-10-09.png",g="/flex_learn_manual/image/02-10-10.png",h="/flex_learn_manual/image/02-10-11.png",k={},b=s('<h1 id="📕-flex-元素-flex-grow" tabindex="-1"><a class="header-anchor" href="#📕-flex-元素-flex-grow" aria-hidden="true">#</a> 📕 flex 元素：flex-grow</h1><p>在 flex 容器中，每个 flex 元素所占用的空间是可以控制的，不仅可以按照特定比例来分配，也可以按照某个固定的值来分配。主要涉及到的属性有：<code>flex-grow</code> 、<code>flex-shrink</code> 以及 <code>flex-basis</code> ，这三个属性可以缩写为 <code>flex</code> 来描述，具体的后面我们会逐个介绍。</p><p>现在我们先来看一下 <code>flex-grow</code> 的作用，从 <strong>grow</strong> 这个词可以看出，<code>flex-grow</code> 主要是作用是计算分配一个 flex 元素在 flex 容器中被分配的比例值，属性值为纯数字，可以是带小数点的数字，<code>flex-grow: 1;</code> 与 <code>flex-grow: 1.5;</code> 都是合法的。</p><p><code>flex-grow</code> 所计算的结果是宽还是高，主要是由“主轴”来决定的，也可以理解为，<code>flex-direction</code> 将影响 <code>flex-grow</code> 所计算的结果是宽还是高。</p><p>由于 <code>flex-grow</code> 是计算 flex 元素可伸展的空间，会可获得最小空间的基础上，按照特定比例去分配空间，如果每个 <code>flex-grow</code> 的值是相同的话，那么所有 flex 元素将被会平均分配，至于 <code>flex-grow: 1;</code> 还是 <code>flex-grow: 100;</code>，结果都是一样的。</p><p>而如果每个值都不同的话，那么每个 flex 元素将会根据特定的比例去获得相对应的宽度。需要注意的是，<code>flex-grow</code> 的默认值是 <code>0</code> ，如果没有设置值的话，flex 元素将不会被分配剩余的空间，而完全是由元素自身的内容来撑开。</p><h2 id="特性分解" tabindex="-1"><a class="header-anchor" href="#特性分解" aria-hidden="true">#</a> 特性分解</h2><h3 id="默认值的情况" tabindex="-1"><a class="header-anchor" href="#默认值的情况" aria-hidden="true">#</a> 默认值的情况</h3><p>一般在使用 flex 弹性布局的时候，都是直接在 flex 容器层直接写 <code>display: flex</code> ，而不会去考虑 flex 元素自身的变化，那么可以得到下图的一个效果，因为 <code>flex-grow</code> 的<strong>默认值</strong>是 <code>0</code> 。</p><img src="'+o+`" style="zoom:50%;"><h3 id="相同-flex-grow-值的情况" tabindex="-1"><a class="header-anchor" href="#相同-flex-grow-值的情况" aria-hidden="true">#</a> 相同 flex-grow 值的情况</h3><p>而当我们改变了默认值，统一设置一个值给 <code>flex-grow</code> 的话，<a href="../../demo.html?id=42">情况就会马上不同</a>。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 
  file: flex_0042.css
  当给 flex 元素设置 flex-grow: 1; 后的情况；
*/</span>
<span class="token selector">.demo</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 在这里给 flex 容器设置了高度 */</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+r+'" style="zoom:50%;"><p>我们可以看到现在的 flex 容器已经被填满了，并且每个 flex 元素的宽度都是相同的。如果这个时候我们改变浏览器的宽度，得到的结果将会是每个 flex 元素的宽度变大了，但还是相同的宽度。</p><img src="'+p+`" style="zoom:50%;"><h3 id="根据比例分配的情况" tabindex="-1"><a class="header-anchor" href="#根据比例分配的情况" aria-hidden="true">#</a> 根据比例分配的情况</h3><p>而如果我们现在<a href="../../demo.html?id=43">调整了其中两个 item</a> 的 <code>flex-grow</code> 属性值，让其与其他元素形成对比的话。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 
  file: flex_0043.css
  改变其中两个 item 的 flex-grow 值后的情况；
*/</span>
<span class="token selector">.demo</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 在这里给 flex 容器设置了高度 */</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.item_1</span> <span class="token punctuation">{</span>
  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.item_2</span> <span class="token punctuation">{</span>
  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照目前这个情况来预计，<code>.item_1</code> 是 <code>.item_2</code> 的两倍，<code>.item_2</code> 是其他 item 元素的两倍。那么实际的效果是不是这样呢？</p><img src="`+u+'" style="zoom:50%;"><img src="'+m+'" style="zoom:50%;"><img src="'+x+'" style="zoom:50%;"><p>从截图的数据来看，近似于我们的预期结果。</p><table><thead><tr><th>flex 元素</th><th>宽度(px)</th></tr></thead><tbody><tr><td>.item_1</td><td>417.83</td></tr><tr><td>.item_2</td><td>225.31</td></tr><tr><td>.item_3</td><td>127.47</td></tr></tbody></table>',25),w=n("code",null,"flex-grow",-1),y={href:"https://css-tricks.com/flex-grow-is-weird/",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"flex-grow",-1),N=n("code",null,"em",-1),V=n("code",null,"px",-1),B=n("code",null,"flex-grow",-1),E=n("code",null,"flex-shrink",-1),I=n("code",null,"flex-basis",-1),L=s('<p>所以，我建议不要太在意具体的值，只要知道在 flex 容器中，只要容器空间足够的情况，正常的情况下 <code>flex-grow</code> 的值越大，被分配的空间必将会越多。</p><h3 id="宽度无法按比例分配的情况" tabindex="-1"><a class="header-anchor" href="#宽度无法按比例分配的情况" aria-hidden="true">#</a> 宽度无法按比例分配的情况</h3><p>按照上面这个 demo，如果我们缩小浏览器的话，可能得到的结果就是这样了。</p><img src="'+f+'" style="zoom:50%;"><img src="'+v+'" style="zoom:50%;"><img src="'+_+'" style="zoom:50%;"><img src="'+g+'" style="zoom:50%;"><p>从图中我们可以看到，现在我们所得到的结果，已经与我们所预期的结果产生了较大的偏差了。主要是因为按照分配后的空间已经无法得到满足，在保证最小可能的情况下容纳元素去分配空间。</p><h3 id="控制-flex-元素可拉伸的宽度" tabindex="-1"><a class="header-anchor" href="#控制-flex-元素可拉伸的宽度" aria-hidden="true">#</a> 控制 flex 元素可拉伸的宽度</h3><p>一个元素可拉伸，那么在 flex 弹性布局中，我们可能会想要某个 flex 元素的宽度到达某个临界点的时候就不再放大，就像下面这张图一样：</p><img src="'+h+`" style="zoom:50%;"><p>从图中我们可以看到 <strong>item_5</strong> 这个<a href="../../demo.html?id=44">元素的宽度明显要比其他的 item 要小</a>，而我们在代码中也并没有做过多的处理。仅仅只是对 <strong>item_5</strong> 这个元素加了 <code>max-width</code> 来限制了最大的宽度值。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 
  file: flex_0044.css
  控制 flex-grow 时可拉伸元素的宽度
*/</span>
<span class="token selector">.demo</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 在这里给 flex 容器设置了高度 */</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.item_5</span> <span class="token punctuation">{</span>
  <span class="token property">max-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>就现在我们还仅仅只是初步了解了 <code>flex-grow</code> 的一些特性，后面结合 <code>flex-basis</code> 以及 <code>flex-shrink</code> 属性，我们将会迎来在 flex 布局中诸多“不可控”的场景。</p>`,15);function C(G,O){const a=t("ExternalLinkIcon");return c(),i("div",null,[b,n("p",null,[e("曾经在网络上有过一个公式去计算 "),w,e(" 最终所得的值，如同这篇文章《"),n("a",y,[z,e(" is weird. Or is it?"),d(a)]),e("》。先不讨论这个公式最终演算出来的结果是否正确，就想想我们为什么要用 flex 布局，难道不是因为弹性，更灵活么？如果要完全计算出一个值的话，为什么不考虑百分比或者 "),N,e(" ，甚至是 "),V,e(" 的单位值呢？更何况目前我们仅仅只是使用 "),B,e("，当后面我们结合 "),E,e(" 以及 "),I,e("，再根据每个 flex 元素的内容，最终可能直接会影响之前所计算的结果。")]),L])}const j=l(k,[["render",C],["__file","flex-grow.html.vue"]]);export{j as default};
